install.packages("renv")
renv::renv_init()
renv::init()
BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
#| output = FALSE
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
#| output: FALSE
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
#Check projects available
GDCprojects = getGDCprojects()
View(GDCprojects)
#Find the skin cancer melanoma project
grep("SK", GDCprojects$id, value = TRUE)
TCGAbiolinks:::getProjectSummary("TCGA-SKCM")
query_TCGA = GDCquery(
project = "TCGA-SKCM",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
sample.type = c("Primary Tumor", "Metastatic")
)
View(query_TCGA)
skcm_res = getResults(query_TCGA)
View(skcm_res)
table(skcm_res$sample_type)
?GDCprepare
TCGAbiolinks:::getProjectSummary("CPTAC-3")
#clean up
rm(list = c("GDCprojects", "query_TCGA", "skcm_res"))
tcga_data = readRDS("../data/tcga_skcm_data.RDS")
library(dplyr)
library(stringr)
sample_metadata = as.data.frame(colData(tcga_data))
#list tissue sites
#unique(sample_metadata$site_of_resection_or_biopsy)
source("functions/Tissue_Rollup.R")
sample_metadata = sample_metadata |>
#add generic identifier
dplyr::mutate(sample_id = paste0("mel", sprintf('%0.3d', 1:length(sample_metadata$patient)))) |>
#move sample id to front
dplyr::select(sample_id, everything()) |>
#remove columns
dplyr::select(!contains("paper_")) |>
#turn stage into factor
dplyr::mutate(ajcc_pathologic_stage = factor(sample_metadata$ajcc_pathologic_stage), .keep = "unused") |>
#change tumor_descriptor column to factor
dplyr::mutate(tumor_descriptor = factor(sample_metadata$tumor_descriptor, levels = c("Primary", "Metastatic"))) |>
#remove samples without stage information
dplyr::filter(ajcc_pathologic_stage != "Not Reported") |>
#add tissue rollup
dplyr::mutate(tissue_rollup = case_when(
site_of_resection_or_biopsy %in% Tissue_Terms$Cutaneous ~ "Cutanous",
site_of_resection_or_biopsy %in% Tissue_Terms$Lymph_Nodes ~ "Lymph_Nodes",
site_of_resection_or_biopsy %in% Tissue_Terms$CNS ~ "CNS",
site_of_resection_or_biopsy %in% Tissue_Terms$Mucosal ~ "Mucosal",
site_of_resection_or_biopsy %in% Tissue_Terms$Organ ~ "Organ",
site_of_resection_or_biopsy %in% Tissue_Terms$Other ~ "Other"
)) |>
#censor for survival
dplyr::mutate(survial_censor = as.integer(ifelse(is.na(days_to_death) == TRUE, "0", "1"))) |>
#days until last follow up or death
dplyr::mutate(last_event = ifelse(survial_censor == "1", days_to_death, days_to_last_follow_up))
#with(sample_metadata, table(site_of_resection_or_biopsy, tissue_rollup))
#cleanup
rm(Tissue_Terms)
renv::snapshot()
renv::status()
renv::snapshot()
renv::snapshot()
#| output: FALSE
library(dplyr)
library(stringr)
tcga_data = readRDS("../data/tcga_skcm_data.RDS")
#| output: FALSE
library(dplyr)
library(edgeR)
library(limma)
#counts
counts = tcga_data@assays@data$unstranded
#add sample names (columns)
colnames(counts) = tcga_data@colData@rownames
#add gene ids (rows)
rownames(counts) = SummarizedExperiment::rowData(tcga_data)@rownames
#find overlap with previously filtered metadata
to_keep = colnames(counts) %in% sample_metadata$barcode
sample_metadata = as.data.frame(SummarizedExperiment::colData(tcga_data))
#list tissue sites
#unique(sample_metadata$site_of_resection_or_biopsy)
source("functions/Tissue_Rollup.R")
sample_metadata = sample_metadata |>
#add generic identifier
dplyr::mutate(sample_id = paste0("mel", sprintf('%0.3d', 1:length(sample_metadata$patient)))) |>
#move sample id to front
dplyr::select(sample_id, everything()) |>
#remove columns
dplyr::select(!contains("paper_")) |>
#turn stage into factor
dplyr::mutate(ajcc_pathologic_stage = factor(sample_metadata$ajcc_pathologic_stage), .keep = "unused") |>
#change tumor_descriptor column to factor
dplyr::mutate(tumor_descriptor = factor(sample_metadata$tumor_descriptor, levels = c("Primary", "Metastatic"))) |>
#remove samples without stage information
dplyr::filter(ajcc_pathologic_stage != "Not Reported") |>
#add tissue rollup
dplyr::mutate(tissue_rollup = case_when(
site_of_resection_or_biopsy %in% Tissue_Terms$Cutaneous ~ "Cutanous",
site_of_resection_or_biopsy %in% Tissue_Terms$Lymph_Nodes ~ "Lymph_Nodes",
site_of_resection_or_biopsy %in% Tissue_Terms$CNS ~ "CNS",
site_of_resection_or_biopsy %in% Tissue_Terms$Mucosal ~ "Mucosal",
site_of_resection_or_biopsy %in% Tissue_Terms$Organ ~ "Organ",
site_of_resection_or_biopsy %in% Tissue_Terms$Other ~ "Other"
)) |>
#censor for survival
dplyr::mutate(survial_censor = as.integer(ifelse(is.na(days_to_death) == TRUE, "0", "1"))) |>
#days until last follow up or death
dplyr::mutate(last_event = ifelse(survial_censor == "1", days_to_death, days_to_last_follow_up))
#with(sample_metadata, table(site_of_resection_or_biopsy, tissue_rollup))
#cleanup
rm(Tissue_Terms)
#find overlap with previously filtered metadata
to_keep = colnames(counts) %in% sample_metadata$barcode
#filter counts
counts = counts[,to_keep]
#clean up
rm(to_keep)
#make a counts object
dge = DGEList(counts)
#filter out genes with low counts
source("functions/Filter_Counts_Function.R")
dge = filter_counts(dge, 850)
#calculate library size normalization
dge = calcNormFactors(dge)
#make a design matrix
design_vector = as.vector(sample_metadata$tumor_descriptor)
design_matrix = model.matrix(~ 0 + design_vector)
#Calculate variance weights
voom_object = voom(dge, design_matrix, plot = TRUE)
#Fit a linear model
fit = lmFit(voom_object, design_matrix)
#Smooth standard errors
fit = eBayes(fit)
#clean up
rm(filter_counts)
diff_exp <- makeContrasts(design_vectorMetastatic - design_vectorPrimary, levels = colnames(coef(fit)))
View(diff_exp)
tmp <- contrasts.fit(fit, diff_exp)
diff_exp <- makeContrasts(design_vectorMetastatic - design_vectorPrimary, levels = colnames(coef(fit)))
diff_exp <- contrasts.fit(fit, diff_exp)
diff_exp <- eBayes(diff_exp)
View(diff_exp)
diff_exp_table <- topTable(diff_exp, sort.by = "P", n = Inf)
View(diff_exp_table)
View(diff_exp_table)
install.packages("EnhancedVolcano")
library(EnhancedVolcano)
library(dplyr)
library(EnhancedVolcano)
install.packages("org.Hs.eg.db")
install.packages("AnnotationDbi")
library(dplyr)
library(EnhancedVolcano)
library(AnnotationDbi)
library(org.Hs.eg.db)
diff_exp_table$gene_symbol = mapIds(org.Hs.eg.db,
keys = rownames(diff_exp_table),
keytype = "ENSEMBL",
column = "SYMBOL")
?mapIds
?AnnotationDbi::mapIds
diff_exp_table$gene_symbol = mapIds(org.Hs.eg.db,
keys = rownames(diff_exp_table),
keytype = "SYMBOL",
column = "ENSEMBL")
View(diff_exp_table)
?gsub
rownames(diff_exp_table) = gsub(pattern = "\\..*",
replacement = "",
x = rownames(diff_exp_table))
diff_exp_table$gene_symbol = mapIds(org.Hs.eg.db,
keys = rownames(diff_exp_table),
keytype = "ENSEMBL",
column = "SYMBOL")
library(dplyr)
library(EnhancedVolcano)
library(AnnotationDbi)
library(org.Hs.eg.db)
diff_exp_table$gene_symbol = mapIds(org.Hs.eg.db,
keys = rownames(diff_exp_table),
keytype = "ENSEMBL",
column = "SYMBOL")
?EnhancedVolcano
install.packages("AnnotationDbi")
diff_exp_table$gene_symbol = mapIds(org.Hs.eg.db,
keys = rownames(diff_exp_table),
keytype = "ENSEMBL",
column = "SYMBOL")
EnhancedVolcano(diff_exp_table,
lab = gene_symbol,
x = logFC,
y = `adj.P.Val`)
EnhancedVolcano(diff_exp_table,
lab = gene_symbol,
x = "logFC",
y = `adj.P.Val`)
EnhancedVolcano(diff_exp_table,
lab = gene_symbol,
x = "logFC",
y = "adj.P.Val")
EnhancedVolcano(diff_exp_table,
lab = diff_exp_table$gene_symbol,
x = "logFC",
y = "adj.P.Val")
