---
title: "Deconvolution"
format: html
---

```{r}

library(immunedeconv)
library(ggplot2)
library(data.table)
library(dplyr)
library(survival)
library(ggpubr)

# set_cibersort_binary("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Documents/Informatics/CIBERSORT/CIBERSORT.R")
# set_cibersort_mat("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Documents/Informatics/CIBERSORT/LM22.txt")

theme_set(theme_classic())

```

# Load data
```{r}

#normalized expression data
source("functions/Load_Normalized_Expression.R")
normalized_data = load_normalized_expression("../outputs/normalized_expression.csv")
rm(load_normalized_expression)

#sample metadata
source("functions/Load_Sample_Metadata.R")
sample_metadata = load_sample_metadata("../data/sample_metadata.csv")
rm(load_sample_metadata)

```

# Format Gene Names
```{r}

#change form Ensembl to HGNC
colnames(normalized_data) = AnnotationDbi::mapIds(org.Hs.eg.db::org.Hs.eg.db,
                                            keys = colnames(normalized_data),
                                            column = "SYMBOL",
                                            keytype = "ENSEMBL"
                                            )

```

# Deconvolutions 
```{r}

#epic, quantiseq, cibersort/cibersort_abs are percent composition values
#xcell, mcp, abis are score values
#estimate is a score values, but gives a tumor purity percent

deconvolute_results_quantiseq = deconvolute(t(normalized_data), 
                                  method = "quantiseq",
                                  tumor = TRUE)

deconvolute_results_epic = deconvolute(t(normalized_data), 
                                  method = "epic",
                                  tumor = TRUE)

deconvolute_results_estimate = deconvolute(t(normalized_data), 
                                  method = "estimate",
                                  tumor = TRUE)

#Cibersort not working; problem with gene names in reference/eset
# deconvolute_results_ciber = deconvolute(t(normalized_data),
#                                   method = "cibersort_abs",
#                                   tumor = TRUE)


```

## Tidy into dataframes 
```{r}

deconvolutions = list()

#Epic
deconvolutions$epic = as.data.frame(t(deconvolute_results_epic))
colnames(deconvolutions$epic) = deconvolutions$epic[1,]
deconvolutions$epic = deconvolutions$epic[2:nrow(deconvolutions$epic),]

#Quantiseq
deconvolutions$quantiseq = as.data.frame(t(deconvolute_results_quantiseq))
colnames(deconvolutions$quantiseq) = deconvolutions$quantiseq[1,]
deconvolutions$quantiseq = deconvolutions$quantiseq[2:nrow(deconvolutions$quantiseq),]

#Estimate
deconvolutions$estimate = as.data.frame(t(deconvolute_results_estimate))
colnames(deconvolutions$estimate) = deconvolutions$estimate[1,]
deconvolutions$estimate = deconvolutions$estimate[2:nrow(deconvolutions$estimate),]

#clean up
rm(list = c("deconvolute_results_epic", "deconvolute_results_estimate", "deconvolute_results_quantiseq"))

```


##Save
```{r}

#estimate
write.csv(deconvolutions$estimate, file = "../outputs/deconvolution_estimate.csv")

#epic
write.csv(deconvolutions$epic, file = "../outputs/deconvolution_epic.csv")

#quantiseq
write.csv(deconvolutions$quantiseq, file = "../outputs/deconvolution_quantiseq.csv")


```


# Consensus Tumor Purity
```{r}

#tumor purity dataframe
tumor_purity = data.frame(sample = row.names(deconvolutions$epic),
                          epic = as.numeric(deconvolutions$epic$`uncharacterized cell`),
                          quantiseq = as.numeric(deconvolutions$quantiseq$`uncharacterized cell`),
                          estimate = as.numeric(deconvolutions$estimate$`tumor purity`))

#Add mean
tumor_purity$methods_mean = rowMeans(tumor_purity[,2:4])

#add sample metadata
tumor_purity = merge(sample_metadata, tumor_purity[,c("sample", "methods_mean")], by.x = "sample_id", by.y = "sample")

```


## Plots comparing methods
```{r}

p1 = ggplot(tumor_purity, aes(x = epic, y = quantiseq)) +
  geom_point() +
  geom_smooth(method= "lm") +
  xlim(0,1) +
  ylim(0,1)

p2 = ggplot(tumor_purity, aes(x = epic, y = estimate)) +
  geom_point() +
  geom_smooth(method= "lm") +
  xlim(0,1) +
  ylim(0,1)

p3 = ggplot(tumor_purity, aes(x = estimate, y = quantiseq)) +
  geom_point() +
  geom_smooth(method= "lm") +
  xlim(0,1) +
  ylim(0,1)

# ggplot(tumor_purity, aes(x = methods_mean, y = epic)) +
#   geom_point() +
#   geom_smooth(method= "lm")
# 
# ggplot(tumor_purity, aes(x = methods_mean, y = quantiseq)) +
#   geom_point() +
#   geom_smooth(method= "lm")
# 
# ggplot(tumor_purity, aes(x = methods_mean, y = estimate)) +
#   geom_point() +
#   geom_smooth(method= "lm")

#png(filename = "../outputs/plots/deconvolutions_other_cell_types.png", height = 400, width = 1200, res = 120)
ggarrange(p1, p3, p2,
          ncol = 3)
#dev.off()

#clean up
rm(list = c("p1", "p2", "p3"))

```


## Primary vs Metastatic Plot
```{r}

png(filename = "../outputs/plots/primary_vs_met_deconvolution_tumor.png", height = 400, width = 500, res = 120)
tumor_purity |> 
  ggplot(aes(x = tumor_descriptor, y = methods_mean, color = tumor_descriptor)) +
    geom_jitter(width = 0.2) +
    stat_summary(fun = mean, geom = "crossbar", width = 0.3, linewidth = 0.3, color = "black") +
    stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.3, linewidth = 0.3, color = "black") +
    theme(legend.position = "none") +
    xlab("") +
    ylab("Average Frequency of\nOther Cell Type")
dev.off()

```


## By disease stage plot
```{r}

ggplot(tumor_purity, aes(x = ajcc_pathologic_stage, y = methods_mean, color = ajcc_pathologic_stage)) +
  geom_jitter(width = 0.2) +
  stat_summary(fun = mean, geom = "crossbar", width = 0.3, color = "black") +
  stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.3, color = "black") +
  labs(x = "Stage", y = "Percent Tumor") +
  theme(legend.position = "none")


```


## By tissue plot
```{r}

ggplot(tumor_purity, aes(x = tissue_rollup, y = methods_mean, color = tissue_rollup)) +
  geom_jitter(width = 0.2) +
  stat_summary(fun = mean, geom = "crossbar", width = 0.3, color = "black") +
  stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.3, color = "black") +
  labs(x = "Tissue of origin", y = "Percent Tumor") +
  theme(legend.position = "none")

```


## Survival plot
```{r}

png(filename = "../outputs/plots/survival_deconvolution_tumor.png", height = 500, width = 700, res = 120)
tumor_purity |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  mutate(grouping = ifelse(methods_mean > median(methods_mean), "High", "Low")) |> 
  ggsurvfit::survfit2(survival::Surv(last_event, survial_censor) ~ grouping , data = _) |>
  ggsurvfit::ggsurvfit() +
  ggsurvfit::add_risktable(risktable_stats = "n.risk") +
  ggsurvfit::add_pvalue() +
  ggtitle("Sample Percent Tumor")
dev.off()

```



# Epic Deconvolution

## Load previously calculated epic deconvolution
```{r}

#Import
deconvolution_epic = read.csv("../outputs/deconvolution_epic.csv")
rownames(deconvolution_epic) = deconvolution_epic$X
deconvolution_epic = deconvolution_epic[,2:ncol(deconvolution_epic)]

#Fix column names
colnames(deconvolution_epic) = c("Bcell", "CAF", "CD4", "CD8", "Endothelial", "Macrophage", "NK", "Other_Cells")

```


## Add to sample metadata
```{r}

#Add epic deconvultion results to sample metadata
sample_metadata = merge(sample_metadata, deconvolution_epic, by = "row.names")

```

## Plot cell types by tissue 
```{r}

cell_types = c("Bcell", "CAF", "CD4", "CD8", "Endothelial", "Macrophage", "NK", "Other_Cells")

#function
tissue_rollup_plot = function(cell_type) {
  
sample_metadata |> 
  ggplot(aes(x = tissue_rollup, y = .data[[cell_type]], color = tissue_rollup)) +
    geom_jitter(width = 0.2) +
    stat_summary(fun = mean, geom = "crossbar", width = 0.3, color = "black") +
    stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.3, color = "black") +
    labs(x = "Tissue of origin", y = cell_type, title = "Epic Deconvolution") +
    theme(legend.position = "none")

}

#plots
lapply(cell_types, tissue_rollup_plot)

rm(tissue_rollup_plot)

```


## Plot cell types by disease stage
```{r}

#function
stage_plot = function(cell_type) {
  
  sample_metadata |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  ggplot(aes(x = ajcc_pathologic_stage, y = .data[[cell_type]], color = ajcc_pathologic_stage)) +
    geom_jitter(width = 0.2) +
    stat_summary(fun = mean, geom = "crossbar", width = 0.3, color = "black") +
    stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.3, color = "black") +
    labs(x = "Stage", y = cell_type, title = "Epic Deconvolution") +
    theme(legend.position = "none")

}

#plots
lapply(cell_types, stage_plot)

#clean up
rm(stage_plot)

```


## Primary vs. metastatic statistics
```{r}

#dataframe of statistics comparing cell types between primary and metastatic samples; filtered on only cutaneous samples
deconvolution_stats = sample_metadata |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  dplyr::select(cell_types, tumor_descriptor) |> 
  mutate_at(cell_types, as.numeric) |> 
  tidyr::pivot_longer(cols = cell_types, names_to = "Cell_Type", values_to = "Value") |> 
  mutate(Cell_Type = as.factor(Cell_Type)) |> 
  group_by(Cell_Type) |> 
  rstatix::t_test(Value ~ tumor_descriptor) |> 
  rstatix::adjust_pvalue(method = "BH")


```


### Plotting function
```{r}

#Plotting function
decon_plot = function(cell_type){
    sample_metadata |> 
      dplyr::filter(tissue_rollup == "Cutaneous") |> 
      ggplot(aes(x = tumor_descriptor, y = .data[[cell_type]], color = tumor_descriptor)) +
        geom_jitter(width = 0.2) +
        stat_summary(fun = mean, geom = "crossbar", width = 0.3, color = "black") +
        stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.3, color = "black") +
        theme(legend.position = "none") +
        xlab("") +
        ylab("Frequency") +
        ggtitle(cell_type)
}


```


### Plots
```{r}
 
lapply(cell_types, decon_plot)

rm(decon_plot)

```


#### Save
```{r}

p1 = decon_plot("Bcell")
p2 = decon_plot("CAF")
p3 = decon_plot("CD8")
p4 = decon_plot("Endothelial")
p5 = decon_plot("Macrophage")
p6 = decon_plot("NK")
p7 = decon_plot("CD4")
p8 = decon_plot("Other_Cells")

png(filename = "../outputs/plots/deconvolution_primary_vs_met.png", height = 600, width = 1400, res = 120)
ggarrange(p1, p7, p3, p6, p5, p2, p4, p8,
          ncol = 4,
          nrow = 2)
dev.off()

rm(list = c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"))


```

## Survival 

### Statistics
```{r}

# #Treat data as continuous
# survival_stats_function = function(cell_type){
#   
#   forumula = as.formula(paste0("Surv(last_event, survial_censor) ~ age_at_index + stage + ", paste(cell_type)))
#   
#   sample_metadata |> 
#     coxph(forumula, data = _) |> 
#     summary()
#   
# }

#Divide at median
survival_stats_function = function(cell_type){
sample_metadata |>
  dplyr::select(cell_types, last_event, survial_censor, age_at_index, stage) |>
  tidyr::pivot_longer(cols = cell_types, names_to = "Cell_Types", values_to = "Value") |>
  dplyr::filter(Cell_Types == cell_type) |>
  mutate(median_division = ifelse(Value > median(Value), "high", "low")) |>
  survival::coxph((Surv(last_event, survial_censor) ~ median_division + age_at_index + stage), data = _) |> 
  summary()
}

#apply to all cell types
survival_stats = lapply(cell_types, survival_stats_function)
#name lists
names(survival_stats) = cell_types

#clean up
rm(survival_stats_function)

```


#### Dataframe
```{r}

survival_stats_df = data.frame(matrix(ncol = 5, nrow = 0))

for(cell_type in cell_types){
  
  pvalue = survival_stats[[cell_type]]$coefficients[1,5]
  HR = survival_stats[[cell_type]]$conf.int[1,1]
  lower_interval = survival_stats[[cell_type]]$conf.int[1,3]
  upper_interval = survival_stats[[cell_type]]$conf.int[1,4]
  
  temp = c(cell_type, pvalue, HR, lower_interval, upper_interval)
  
  survival_stats_df = rbind(temp, survival_stats_df)
  
}

colnames(survival_stats_df) <- c('cell_type', 'pval', 'HR', "lower_interval", "upper_interval")

survival_stats_df = survival_stats_df |> 
  mutate_at(c('pval', 'HR', "lower_interval", "upper_interval"), as.numeric)

rm(list = c("cell_type", "HR", "lower_interval", "pvalue", "temp", "upper_interval"))

```

### Kaplan Meier Plots

```{r}

#function
survival_plot = function(cell_type) {
  
sample_metadata |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  dplyr::select(cell_type, last_event, survial_censor) |> 
  mutate(grouping = ifelse(.data[[cell_type]] > median(.data[[cell_type]]), "High", "Low")) |> 
  ggsurvfit::survfit2(survival::Surv(last_event, survial_censor) ~ grouping, data = _) |>
  ggsurvfit::ggsurvfit() +
    #ggsurvfit::add_risktable(risktable_stats = "n.risk") +
    #ggsurvfit::add_pvalue() +
    ggtitle(cell_type) +
    xlab("Days")
}

#plots
lapply(cell_types, survival_plot)

#clean up
#rm(survival_plot)

```


##### Save
```{r}

p1 = survival_plot("Bcell")
p2 = survival_plot("CAF")
p3 = survival_plot("CD8")
p4 = survival_plot("Endothelial")
p5 = survival_plot("Macrophage")
p6 = survival_plot("NK")
p7 = survival_plot("CD4")
p8 = survival_plot("Other_Cells")

png(filename = "../outputs/plots/deconvolution_survival.png", height = 600, width = 1400, res = 120)
ggarrange(p1, p7, p3, p6, p5, p2, p4, p8,
          ncol = 4,
          nrow = 2)
dev.off()

rm(list = c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"))

```


### Forest plot
```{r}

png(filename = "../outputs/plots/deconvolution_forest_plot.png", height = 400, width = 500, res = 120)
survival_stats_df |> 
    ggplot(aes(x = log2(1/HR), y = cell_type, xmin = log2(1/lower_interval), xmax = log2(1/upper_interval))) +
    geom_point(size = 3) +
    geom_errorbarh(height=.3) +
    geom_vline(xintercept = 0, linetype = "dashed") +
    labs(x = "log2(Hazard Ratio)", y = "")
dev.off()
  
```


### Multivariable regression
```{r}

survival_models = list()

#Module with only intercept
survival_models$intercept_only = survival::coxph(Surv(last_event, survial_censor) ~ 1, data = sample_metadata)

summary(survival_models$intercept_only)

#Model with all modules
survival_models$full_model = survival::coxph(Surv(last_event, survial_censor) ~ Bcell + CAF + CD4 + CD8 + Endothelial + Macrophage + NK + Other_Cells, 
                                                data = sample_metadata)

summary(survival_models$full_model)

```

#### Stepwise regression
```{r}

#Step-wise variable selection
stepwise_regression = StepReg::stepwiseCox(Surv(last_event, survial_censor) ~ Bcell + CAF + CD4 + CD8 + Endothelial + Macrophage + NK + Other_Cells,
                        data = sample_metadata, 
                        selection = "score",
                        select = "AIC",
                        method = "efron",
                        best = 10)

unname(unlist(stepwise_regression$`Selected Varaibles`))

#Best model
survival_models$optimized_model = survival::coxph(Surv(last_event, survial_censor) ~ Bcell + CAF + CD4 + CD8 + Endothelial + Other_Cells,
                                                  data = sample_metadata)

summary(survival_models$optimized_model)

rm(stepwise_regression)


```


#### AIC
```{r}

#AIC values
extractAIC(survival_models$intercept_only)  
extractAIC(survival_models$full_model)
extractAIC(survival_models$optimized_model)

```


## Correlations with WGCNA Modules - IN PROGRESS

### Create merged dataframe
```{r}

#read in WGCNA modules
modules = readRDS("../outputs/wgcna_object.rds")
modules = modules$MEs
module_names = colnames(modules)

# #add sample metadata annotations
# annotated_me = merge(modules$MEs, sample_metadata, by.x = "row.names", by.y = "sample_id")
# rownames(annotated_me) = annotated_me$Row.names
# annotated_me = annotated_me[,c(-1)]

#read in epic deconvolution results
deconvolution_epic = read.csv("../outputs/deconvolution_epic.csv")
rownames(deconvolution_epic) = deconvolution_epic$X
deconvolution_epic = deconvolution_epic[,2:ncol(deconvolution_epic)]
colnames(deconvolution_epic) = c("Bcell", "CAF", "CD4", "CD8", "Endothelial", "Macrophage", "NK", "Other_Cells")

#merge modules, deconvolution results, sample metadata
module_cell_type_df = merge(modules, deconvolution_epic, by = "row.names")
rownames(module_cell_type_df) = module_cell_type_df$Row.names
module_cell_type_df = module_cell_type_df[,2:ncol(module_cell_type_df)]

#clean up
rm(list = c("modules", "annotated_me", "deconvolution_epic"))

```


### Correlations
```{r}

module_cell_type_correlations = cor(module_cell_type_df)

#Reformat data for ggplot
module_cell_type_correlations = module_cell_type_correlations |>
  as.data.frame() |> 
  mutate(module_name = row.names(module_cell_type_correlations)) |> 
  tidyr::pivot_longer(cols = colnames(module_cell_type_correlations)) |> 
  dplyr::filter(!(name %in% module_names)) |> 
  dplyr::filter(module_name %in% module_names)

#clean up 
rm(module_names)

```

### Correlations Heatmap
```{r}

png(file = "../outputs/plots/module_deconvolution_correlations.png", height = 600, width = 1000, res = 150)
ggplot(module_cell_type_correlations, aes(x = module_name, y = name, fill = value)) +
  geom_tile() +
  scale_fill_gradient2(low="red", mid = "white", high="blue") +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(x = "WGCNA Module", y = "Epic Deconvolution Cell Type", title = "Correlations: Module Eigen Values & Cell Type Frequencies", fill = "Correlation\nCoefficient") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
dev.off()

```

### Scatter plots
```{r}

p1 = ggplot(module_cell_type_df, aes(x = MEblack, y = CAF)) +
  geom_point() +
  geom_smooth(method = "lm") +
  ylim(0, max(module_cell_type_df$CAF))

p2 = ggplot(module_cell_type_df, aes(x = MEyellow, y = CD8)) +
  geom_point() +
  geom_smooth(method = "lm") +
  ylim(0, max(module_cell_type_df$CD8))

p3 = ggplot(module_cell_type_df, aes(x = MEtan, y = Other_Cells)) +
  geom_point() +
  geom_smooth(method = "lm") +
  ylim(0, max(module_cell_type_df$Other_Cells))

png(filename = "../outputs/plots/module_deconvolution_correlations_examples.png", height = 450, width = 1200, res = 150)
ggarrange(p1, p2, p3,
          ncol = 3)
dev.off()

#clean up
rm(list = c("p1", "p2", "p3"))

```

# ... To Do: ...

# XCell

```{r}



```