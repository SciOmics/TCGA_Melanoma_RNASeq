---
title: "Gene Signature Analysis"
format: html
---

```{r}

library(dplyr)
library(readxl)
library(GSVA)
library(ggplot2)
library(singscore)
library(survival)
library(ggsurvfit)
library(mclust)
library(AnnotationDbi)

ggplot2::theme_set(ggplot2::theme_classic())

```


# Load Data 
```{r}

#normalized expression data
source("functions/Load_Normalized_Expression.R")
normalized_data = load_normalized_expression("../outputs/normalized_expression.csv")
rm(load_normalized_expression)

#sample metadata
source("functions/Load_Sample_Metadata.R")
sample_metadata = load_sample_metadata("../data/sample_metadata.csv")
rm(load_sample_metadata)

```


# Color palette
```{r}

palette_discrete = wesanderson::wes_palette("Darjeeling1", 5, type = "discrete")
wesanderson::wes_palette("Darjeeling1", 5, type = "discrete")

palette_continuous = wesanderson::wes_palette("Zissou1", 100, type = "continuous")
wesanderson::wes_palette("Zissou1", 100, type = "continuous")

```


# Epithelial & Mesenchymal Signatures
```{r}

#Make a signatures list
signatures = list()

#Read in signatures
signatures$patient_EMT = read_excel("../references/Tan_2014_EMT_Signatures.xlsx", sheet = "Tumor")

signatures$cell_line_EMT = read_excel("../references/Tan_2014_EMT_Signatures.xlsx", sheet = "Cell_Line")

#Separate into epithelial and mesenchymal signatures
signatures$patient_epi = signatures$patient_EMT |> 
  dplyr::filter(Category == "Epi") |> 
  pull("Gene_Symbol")

signatures$patient_mes = signatures$patient_EMT |> 
  dplyr::filter(Category == "Mes") |> 
  pull("Gene_Symbol")

signatures$cell_epi = signatures$cell_line_EMT |> 
  dplyr::filter(Category == "Epi") |> 
  pull("Gene_Symbol")

signatures$cell_mes = signatures$cell_line_EMT |> 
  dplyr::filter(Category == "Mes") |> 
  pull("Gene_Symbol")

#Create a signature out of overlaps
signatures$signatures_epi_overlap = signatures$patient_epi[signatures$patient_epi %in% signatures$cell_epi]
  
signatures$signatures_mes_overlap = signatures$patient_mes[signatures$patient_mes %in% signatures$cell_mes]

#Clean up
signatures = signatures[-c(1,2)]
  

```

# Prep data
```{r}

#Change column names of normalized data from ensembl ids to gene symbols
colnames(normalized_data) = mapIds(org.Hs.eg.db::org.Hs.eg.db,
                                    keys = colnames(normalized_data),
                                    keytype = "ENSEMBL",
                                    column = "SYMBOL")

```


# GSVA
```{r}

#GSVA
gsva_results = gsva(expr = as.matrix(t(normalized_data)),
                    gset.idx.list = signatures)

#Make a dataframe of results
gsva_results = as.data.frame(t(gsva_results))

#Add sample metadata
gsva_results = merge(gsva_results, 
                     sample_metadata, 
                     by.x = "row.names",
                     by.y = "sample_id")


```

## Plots
```{r}

##MAKE INTO A FUNCTION##

#png(filename = "../outputs/GSVA_EMT_plot.png", height = 800, width = 1000, res = 200)
ggplot(gsva_results, aes(x = patient_epi, y = patient_mes, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Epithelial", y = "Mesenchymal", title = "Patient Tumor Derived Signatures") +
  theme_classic()
#dev.off()

ggplot(gsva_results, aes(x = cell_epi, y = cell_mes, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Epithelial", y = "Mesenchymal", title = "Cell Line Derived Signatures") +
  theme_classic()

ggplot(gsva_results, aes(x = signatures_epi_overlap, y = signatures_mes_overlap, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Epithelial", y = "Mesenchymal", title = "Overlapping Derived Signatures") +
  theme_classic()


```

# ssGSEA
```{r}

#ssGSEA
ssgsea_results = gsva(expr = as.matrix(t(normalized_data)), 
                      gset.idx.list = signatures, 
                      method = 'ssgsea')

#Make a dataframe of results
ssgsea_results = as.data.frame(t(ssgsea_results))

#Add sample metadata
ssgsea_results = merge(ssgsea_results, 
                     sample_metadata, 
                     by.x = "row.names",
                     by.y = "sample_id")


```

## Plots
```{r}

#png(filename = "../outputs/plots/ssGSEA_EMT_plot.png", height = 800, width = 1000, res = 200)
ggplot(ssgsea_results, aes(x = patient_epi, y = patient_mes, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Epithelial", y = "Mesenchymal", title = "Patient Tumor Derived ssGSEA Signatures") +
  theme_classic()
#dev.off()

ggplot(ssgsea_results, aes(x = cell_epi, y = cell_mes, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Epithelial", y = "Mesenchymal", title = "Cell Line Derived Signatures") +
  theme_classic()

ggplot(ssgsea_results, aes(x = signatures_epi_overlap, y = signatures_mes_overlap, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Epithelial", y = "Mesenchymal", title = "Overlapping Derived Signatures") +
  theme_classic()

```

## Survival

### Divide by GMM

```{r}

#divide into singscore high vs low using a Guassian Mixture Model
gmm_results = Mclust(ssgsea_results$patient_mes, G = 2)
ssgsea_results$patient_mes_gmm = gmm_results$classification

ggplot(ssgsea_results, aes(x = patient_mes, fill = as.factor(patient_mes_gmm))) +
  geom_density()

ssgsea_results = ssgsea_results |> 
  mutate(patient_mes_gmm_group = case_when(patient_mes_gmm == "1" ~ "Low",
                                           patient_mes_gmm == "2" ~ "High",
                                           .default = "unknown"))


#Survival
ssgsea_results |> 
  dplyr::filter(tissue_rollup == "Cutaneous" & tumor_descriptor == "Metastatic") |> 
  survfit2(Surv(last_event, survial_censor) ~ patient_mes_gmm_group , data = _) |>
    ggsurvfit() +
    add_pvalue() +
    add_risktable(risktable_stats = "n.risk")

#Cox PH
ssgsea_results |> 
  dplyr::filter(tissue_rollup == "Cutaneous" & tumor_descriptor == "Metastatic") |> 
  coxph(Surv(last_event, survial_censor) ~ patient_mes_gmm_group, data = _)



```

Oddly, mesenchymal score high patients seem to have better overall survival. Is the gene signature not appropriate? Am I missing a confounder? 

### Divide at Median
```{r}

#try high and low at median
ssgsea_results = ssgsea_results |> 
  mutate(patient_mes_division = ifelse(patient_mes > median(patient_mes), "High", "Low"))

ggplot(ssgsea_results, aes(x = patient_mes, fill = as.factor(patient_mes_division))) +
  geom_density()

ssgsea_results |> 
  dplyr::filter(tissue_rollup == "Cutaneous" & tumor_descriptor == "Metastatic") |> 
  survfit2(Surv(last_event, survial_censor) ~ patient_mes_division , data = _) |>
    ggsurvfit() +
    add_pvalue() +
    add_risktable(risktable_stats = "n.risk")


```

#### Epithelial
```{r}

ssgsea_results = ssgsea_results |> 
  mutate(patient_epi_division = ifelse(patient_epi > median(patient_epi), "High", "Low"))

ggplot(ssgsea_results, aes(x = patient_epi, fill = as.factor(patient_epi_division))) +
  geom_density()

ssgsea_results |> 
  dplyr::filter(tissue_rollup == "Cutaneous" & tumor_descriptor == "Metastatic") |> 
  survfit2(Surv(last_event, survial_censor) ~ patient_epi_division , data = _) |>
    ggsurvfit() +
    add_pvalue() +
    add_risktable(risktable_stats = "n.risk")


```

# Singscore of combined epithelial and Mesenchymal
```{r}

#make an empty data frame for results
#rank data
ranked_df = rankGenes(t(normalized_data))
#run singscore
ss_patient_signature = simpleScore(ranked_df, upSet = signatures$patient_mes, downSet = signatures$patient_epi)
ss_cell_signature = simpleScore(ranked_df, upSet = signatures$cell_mes, downSet = signatures$cell_epi)
ss_cell_signature = simpleScore(ranked_df, upSet = signatures$signatures_mes_overlap, downSet = signatures$signatures_epi_overlap)

#add sample metadata
ss_patient_signature = merge(ss_patient_signature, 
                     sample_metadata, 
                     by.x = "row.names",
                     by.y = "sample_id")


```

## Plots
```{r}

#Epi vs Mes scores
#png(filename = "../outputs/SingScore_EMT_plot.png", height = 800, width = 1000, res = 200)
ggplot(ss_patient_signature, aes(x = -DownScore, y = UpScore, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Epithelial", y = "Mesenchymal", title = "Patient Tumor Derived SingScore Signatures") +
  theme_classic()
#dev.off()

ggplot(ss_patient_signature, aes(x = tumor_descriptor, y = TotalScore, color = tissue_rollup)) +
  geom_jitter(width = 0.25) +
  scale_color_manual(values = palette_discrete) +
  labs(x= "", y = "SingScore", title = "Patient Tumor Derived Signature") +
  theme_classic() 

# add mean bar, p-value, 95% CI, number of samples per group, center title

#Cutaneous sites only
#png(filename = "../outputs/plots/singscore_primary_met.png", height = 500, width = 700, res = 120)
ss_patient_signature |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  ggplot(aes(x = tumor_descriptor, y = TotalScore, color = tumor_descriptor)) +
  geom_jitter(width = 0.2) +
  stat_summary(aes(group = tumor_descriptor), fun.y = mean, geom = 'crossbar', width = 0.3, color = "black") +
  scale_color_manual(values = c(palette_discrete[5], palette_discrete[1])) +
  labs(x= "", y = "SingScore", title = "Patient Tumor Derived Signature - Only Cutaneous Samples", subtitle = "Higher Scores Correspond to More Mesenchymal Like") +
  theme_classic() +
  theme(legend.position = "none")
#dev.off()

ss_patient_signature |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  ggplot(aes(x = ajcc_pathologic_stage, y = TotalScore, color = tumor_descriptor)) +
  geom_jitter(width = 0.2) +
  stat_summary(aes(group = tumor_descriptor), fun.y = mean, geom = 'crossbar', width = 0.3, color = "black") +
  scale_color_manual(values = c(palette_discrete[5], palette_discrete[1])) +
  labs(x= "", y = "SingScore", title = "Patient Tumor Derived Signature - Only Cutaneous Samples", subtitle = "Higher Scores Correspond to More Mesenchymal Like") +
  theme_classic() 


```

## Survival

### Continuous
```{r}

#Cox regression results treating score as continuous
cox_results = sample_metadata |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  coxph(Surv(last_event, survial_censor) ~ age_at_index , data = _) |> 
  summary()

png(filename = "../outputs/plots/survival_by_singscore.png", height = 400, width = 800, res = 120)
ss_patient_signature |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  ggplot(aes(x = TotalScore, y = last_event, color = as.factor(survial_censor))) +
  geom_point() +
  scale_color_manual(values = c("grey", "black"),labels = c('Censored', 'Not Censored')) +
  labs(color = "", y = "Days from index", x = "SingScore", title = "Overall Survival by Epithelial–Mesenchymal Score", subtitle = "filtered to cutaneous samples") +
  annotate("text", x = 0, y = 9000, label = paste0("HR: ", round(cox_results$coefficients[2], 4), "\np-value: ", round(cox_results$coefficients[5], 5)))
dev.off()

#clean up
rm(cox_results)

```


### Divide by GMM
```{r}

#GMM division
gmm_results = Mclust(ss_patient_signature$TotalScore)
ss_patient_signature$gmm = gmm_results$classification

p2 = ggplot(ss_patient_signature, aes(x = TotalScore, fill = as.factor(gmm))) +
  geom_density() +
  scale_fill_manual(values = palette_discrete[c(5,1)],labels = c('Low', 'High')) +
  labs(x = "SingScore Value", y = "Density", title = "Gaussian Mixture Model Grouping") +
  theme(legend.position = "none")

p2

p3 = ss_patient_signature |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  survfit2(Surv(last_event, survial_censor) ~ gmm , data = _) |>
  ggsurvfit() +
    add_pvalue() +
    add_risktable(risktable_stats = "n.risk") + 
    scale_color_manual(values = palette_discrete[c(5,1)],labels = c('Low', 'High')) +
    ggtitle("EM SingScore", subtitle = "Stratified by GMM\nFiltered to cutaneous samples")
  
p3

png(filename = "../outputs/plots/survival_by_singscore_gmm.png", height = 400, width = 1000, res = 120)
ggarrange(p2, p3)
dev.off()


```

### Divide at Median
```{r}

ss_patient_signature = ss_patient_signature |> 
  mutate(median_division = ifelse(TotalScore > median(TotalScore), "High", "Low"))

ss_patient_signature |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  survfit2(Surv(last_event, survial_censor) ~ median_division , data = _) |>
  ggsurvfit() +
    add_pvalue() +
    add_risktable(risktable_stats = "n.risk") + 
    scale_color_manual(values = palette_discrete[c(5,1)],labels = c('Low', 'High')) +
    ggtitle("EM SingScore", subtitle = "Stratified at median\nFiltered to cutaneous only samples")

```


# Make a dataframe of results
```{r}

#merge ssGSEA and SingScore results
gene_signature_results =  merge(ssgsea_results[1:7], ss_patient_signature[1:7], by = "Row.names")
#remove columns
gene_signature_results = gene_signature_results |> 
  dplyr::select(!c("TotalDispersion", "UpDispersion", "DownDispersion"))
#rename columns
colnames(gene_signature_results) = c("Sample_ID",
                                     "ssGSEA_patient_epi_score",
                                     "ssGSEA_patient_mes_score",
                                     "ssGSEA_cell_epi_score",
                                     "ssGSEA_cell_mes_score",
                                     "ssGSEA_overlap_epi_score",
                                     "ssGSEA_overlap_mes_score",
                                     "SingScore_TotalScore",
                                     "SingScore_mes_score",
                                     "SingScore_epi_score")



```


## Save Results
```{r}

write.csv(gene_signature_results, file = "../outputs/epi_mes_signature_scores.csv")

```

# Compare Methods

## Epi vs. Mes Plots
```{r}

gsva_plot = ggplot(gsva_results, aes(x = patient_epi, y = patient_mes, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Epithelial", y = "Mesenchymal") +
  theme_classic() +
  theme(legend.position = "none")

ssGSEA_plot = ggplot(ssgsea_results, aes(x = patient_epi, y = patient_mes, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Epithelial", y = "Mesenchymal") +
  theme_classic() +
  theme(legend.position = "none") 

singscore_plot = ggplot(ss_patient_signature, aes(x = -DownScore, y = UpScore, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Epithelial", y = "Mesenchymal") +
  theme_classic()

png(filename = "../outputs/plots/Epi_Mes_scores.png", height = 500, width = 1600, res = 100)
ggarrange(gsva_plot, ssGSEA_plot, singscore_plot,
          ncol = 3,
          labels = c("     GSVA", "     ssGSEA", "     SingSCore"))
dev.off()

```

# Correlation between epi mes scores
```{r}

ggplot(gene_signature_results, aes(x = SingScore_mes_score, y = SingScore_epi_score)) +
  geom_point()

ggplot(gene_signature_results, aes(x = ssGSEA_patient_mes_score, y = ssGSEA_patient_epi_score)) +
  geom_point()

```


# Correlations of different signature methods
```{r}

ggplot(gene_signature_results, aes(x = ssGSEA_patient_epi_score, y = SingScore_epi_score)) +
  geom_point()

ggplot(gene_signature_results, aes(x = ssGSEA_patient_mes_score, y = SingScore_mes_score)) +
  geom_point()

```

# ...

# Bayesian statistics on Singscore values - primary vs met
```{r}

```

# Cancer Testis Antigen Signature
```{r}

#import signature
CT_antigens = read.csv("../references/CT_Antigens.csv")

#rank data
ranked_df = rankGenes(t(normalized_data))
#run singscore
ss_CT_signature = simpleScore(ranked_df, 
                               upSet = CT_antigens$Member)

#add sample metadata
ss_CT_signature = merge(ss_CT_signature, 
                     sample_metadata, 
                     by.x = "row.names",
                     by.y = "sample_id")

#Cox regression results treating score as continuous
cox_results = ss_CT_signature |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  coxph(Surv(last_event, survial_censor) ~ TotalScore + age_at_index + stage, data = _) |> 
  summary()

cox_results

```


# Chemokine Signature
```{r}

#import signature
chemokine_signature = read.csv("../references/Chemokines.csv")

#rank data
ranked_df = rankGenes(t(normalized_data))
#run singscore
ss_chemokine_signature = simpleScore(ranked_df, 
                               upSet = chemokine_signature |>  dplyr::filter(Role == "Activating") |> pull(Gene), 
                               downSet = chemokine_signature |>  dplyr::filter(Role == "Suppressive") |> pull(Gene))

#add sample metadata
ss_chemokine_signature = merge(ss_chemokine_signature, 
                     sample_metadata, 
                     by.x = "row.names",
                     by.y = "sample_id")

#plot
ggplot(ss_chemokine_signature, aes(x = DownScore, y = UpScore, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Suppressive Chemokines Score", y = "Activating Chemokines Score", title = "Chemokines SingScore Signature") +
  theme_classic()

#Cox regression results treating score as continuous
cox_results = ss_chemokine_signature |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  coxph(Surv(last_event, survial_censor) ~ TotalScore + age_at_index + stage, data = _) |> 
  summary()

cox_results

#KM plot
ss_chemokine_signature |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  mutate(median_division = ifelse(TotalScore > median(TotalScore), "High", "Low")) |> 
  survfit2(Surv(last_event, survial_censor) ~ median_division , data = _) |>
  ggsurvfit() +
    scale_color_manual(values = palette_discrete[c(5,1)],labels = c('Low', 'High')) +
    ggtitle("Chemokine Score", subtitle = "Stratified at median\nFiltered to cutaneous only samples")


```


#ICD Signature
```{r}

#import signature
ICD_markers = read.csv("../references/Garg_A_et_al_ICD_Signature.csv")

#rank data
ranked_df = rankGenes(t(normalized_data))
#run singscore
ss_ICD_signature = simpleScore(ranked_df, 
                               upSet = ICD_markers |>  dplyr::filter(Increased_Decreased_in_ICD == "Increased") |>  dplyr::filter(Human.Gene != c("CD8A", "CD8B", "CD4", "FOXP3")) |>  pull(Human.Gene), 
                               downSet = ICD_markers |>  dplyr::filter(Increased_Decreased_in_ICD == "Decreased") |>  dplyr::filter(Human.Gene != c("CD8A", "CD8B", "CD4", "FOXP3")) |>  pull(Human.Gene))

#add sample metadata
ss_ICD_signature = merge(ss_ICD_signature, 
                     sample_metadata, 
                     by.x = "row.names",
                     by.y = "sample_id")

#plot
ggplot(ss_ICD_signature, aes(x = DownScore, y = UpScore, color = tumor_descriptor)) +
  geom_point() +
  scale_color_manual(values = c(palette_discrete[1], palette_discrete[5])) +
  labs(x = "Score of ICD Decreased Genes", y = "Score of ICD Increased Genes", title = "Immunogenic Cell Death SingScore Signature") +
  theme_classic()




```


### Survival 
```{r}

#Cox regression results treating score as continuous
cox_results = ss_ICD_signature |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  coxph(Surv(last_event, survial_censor) ~ TotalScore + age_at_index + stage, data = _) |> 
  summary()

cox_results

ggplot(ss_ICD_signature, aes(x = TotalScore)) +
  geom_histogram()

#KM plot
ss_ICD_signature |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  mutate(median_division = ifelse(TotalScore > median(TotalScore), "High", "Low")) |> 
  survfit2(Surv(last_event, survial_censor) ~ median_division , data = _) |>
  ggsurvfit() +
    scale_color_manual(values = palette_discrete[c(5,1)],labels = c('Low', 'High')) +
    ggtitle("ICD Score", subtitle = "Stratified at median\nFiltered to cutaneous only samples")


```