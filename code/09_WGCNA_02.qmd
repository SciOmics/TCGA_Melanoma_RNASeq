---
title: "WGCNA: Analysis (Part 2)"
format: html
---

```{r}

library(WGCNA)
library(ggplot2)
library(dplyr)
library(doParallel)
library(rstatix)
library(clusterProfiler)
library(survival)
library(ggsurvfit)
library(tidygraph)
library(ggraph)
library(data.table)
library(parallel)
library(corrplot)
library(readxl)

ggplot2::theme_set(ggplot2::theme_classic())

```

# Load data
```{r}

#normalized expression data
source("functions/Load_Normalized_Expression.R")
normalized_data = load_normalized_expression("../outputs/normalized_expression.csv")
rm(load_normalized_expression)

#sample metadata
source("functions/Load_Sample_Metadata.R")
sample_metadata = load_sample_metadata("../data/sample_metadata.csv")
rm(load_sample_metadata)

#WGCNA modules
modules = readRDS("../outputs/wgcna_object.rds")

#WGCNA module genes
module_genes = read.csv("../outputs/wgcna_module_genes.csv")
row.names(module_genes) = module_genes$X
module_genes = module_genes[,-1]

#WGCNA eigenvales
# module_eigenvalues = read.csv("../outputs/wgcna_module_eigenvalues.csv")
# row.names(module_eigenvalues) = module_eigenvalues$X
# module_eigenvalues = module_eigenvalues[,-1]

#WGCNA annotated eigenvalues
annotated_me = merge(modules$MEs, sample_metadata, by.x = "row.names", by.y = "sample_id")
rownames(annotated_me) = annotated_me$Row.names
annotated_me = annotated_me[,c(-1)]

```


# Heatmaps

## Modules vs Samples
```{r}

#Modules vs Samples
#png(filename = "../outputs/WGCNA_module_sample_heatmap.png", height = 1200, width = 800, res = 120)
annotated_me |> 
  dplyr::select(starts_with("ME")) |> 
  as.matrix() |> 
  heatmap(scale = "column", labRow = annotated_me$tumor_descriptor)
#dev.off()

```

## Genes in Modules

### Plotting function
```{r}

module_gene_heatmap = function(module){
  
  temp = module_genes |> 
  dplyr::filter(Module == module) 

  temp = normalized_data[,colnames(normalized_data) %in% temp$ENSEMBL]
  temp = merge(dplyr::select(annotated_me, tumor_descriptor), temp, by = "row.names")

  heatmap(as.matrix(t(temp[,3:ncol(temp)])),
        labRow = rownames(t(temp)),
        labCol = temp$tumor_descriptor,
        main = module)
}

```


### Plots
```{r}

lapply(unique(module_genes$Module), module_gene_heatmap)

rm(module_gene_heatmap)

```


# Hub Genes

## Plotting function
```{r}
 
#Plotting function
module_gene_correlation_plot = function(module, gene) {
  
  #module = paste0("ME", module)
  
  normalized_data |> 
  merge(annotated_me, by = "row.names") |> 
  ggplot(aes(x = .data[[module]], y = .data[[gene]])) +
    geom_point() +
    geom_smooth(method = "lm")
}

#Test
# module_gene_correlation_plot("ENSG00000178363", "MEblack")

```

## Plots
```{r}

hub_genes = read.csv("../outputs/hub_genes.csv")

for (module in hub_genes$X){
  #need to add "ME" to front of module name
  MEmodule = paste0("ME",module)
  #find hub gene that corresponds to module
  hub_gene = hub_genes[hub_genes$X == module, 2]
  plot = module_gene_correlation_plot(MEmodule, gene = hub_gene)
  print(plot)
}

rm(list = c("module_gene_correlation_plot", "hub_genes", "hub_gene", "MEmodule", "module", "plot"))

```

# Module pathway analysis

## Function
```{r}

module_enrichment = function(module) {
  module_genes |> 
  filter(Module == module) |> 
  pull(ncbi) |> 
  na.omit() |> 
  enrichGO(OrgDb = org.Hs.eg.db::org.Hs.eg.db,
           ont = "ALL") |> 
  enrichplot::dotplot(showCategory = 8,
                      font.size = 8) +
    ggtitle(module)
}

```


## Plots
```{r}

plots = parallel::mclapply(unique(module_genes$Module), 
                   module_enrichment, 
                   mc.cores = 12)

names(plots) = unique(module_genes$Module)

plots

rm(list = c("module_enrichment"))

```


### Save
```{r}

png(filename = "../outputs/plots/wgcna_pathways.png", height = 800, width = 1500, res = 120)
ggarrange(plots[["yellow"]],
          plots[["tan"]],
          plots[["greenyellow"]],
          plots[["brown"]])
dev.off()

png(filename = "../outputs/plots/wgcna_pathways_primary_vs_met.png", height = 800, width = 1500, res = 120)
ggarrange(plots[["red"]],
          plots[["magenta"]],
          plots[["purple"]],
          plots[["greenyellow"]])
dev.off()

```


# Primary vs metastatic samples

## Statistics
```{r}

#Primary vs Mets
module_stats = annotated_me |> 
  dplyr::filter(tissue_rollup == "Cutaneous") |> 
  dplyr::select(starts_with("ME"), tumor_descriptor) |> 
  tidyr::pivot_longer(cols = contains("ME"), names_to = "Module", values_to = "Value") |> 
  group_by(Module) |> 
  rstatix::t_test(Value ~ tumor_descriptor, detailed = TRUE) |> 
  adjust_pvalue(method = "BH")

#add standard deviation
stdev = annotated_me |>
  dplyr::filter(tissue_rollup == "Cutaneous") |>
  dplyr::select(starts_with("ME")) |>
  sapply(sd) |>
  as.data.frame()

colnames(stdev) = "sd"

module_stats= merge(module_stats, stdev, by.x = "Module", by.y = "row.names")

rm(stdev)


#add cohen's d
module_stats = module_stats |>
  mutate(cohens_d = estimate/sd,
         cohens_d_lower = conf.low/sd,
         cohens_d_upper = conf.high/sd)
  
  

```

## Plotting function
```{r}

plot_modules = function(module_name){
  
  pval = module_stats[module_stats$Module == module_name, "p.adj"]
  
  annotated_me |>
    dplyr::filter(tissue_rollup == "Cutaneous") |>
    ggplot(aes(x = tumor_descriptor, y = .data[[module_name]], color = tumor_descriptor)) +
      geom_jitter(width = 0.2) +
      stat_summary(fun = mean, geom = "crossbar", width = 0.3, color = "black") +
      stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.3, color = "black") +
      theme(legend.position = "none") +
      annotate("text", x = 1.5, y = 0, label = paste0("adj p-val:\n", round(pval, 6)))

}

```

## Plots
```{r}

plots = lapply(colnames(annotated_me[1:17]), plot_modules)
names(plots) = colnames(annotated_me[1:17])

plots

rm(plot_modules)

```

### Save
```{r}

png(filename = "../outputs/plots/wgcna_primary_vs_met.png", height = 600, width = 1000, res = 120)
ggarrange(plots[["MEred"]],
          plots[["MEmagenta"]],
          plots[["MEyellow"]],
          plots[["MEgreenyellow"]])
dev.off()

```

## Forest plot -- IN PROGRESS --
```{r}

png(filename = "../outputs/plots/wgcna_forest_primary_vs_met.png", height = 600, width = 800, res = 120)
ggplot(module_stats, aes(x = cohens_d, y = Module, xmin = cohens_d_lower, xmax = cohens_d_upper)) +
  geom_point(size = 3) +
  geom_errorbarh(height=.1) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(title = "Metastatic vs. Primary Samples",
       subtitle = "Cutaneous Samples Only",
       x = "Standardized Effect Size (Cohen's d)",
       y = "")
dev.off()

```



# Survival Analysis

## Statistics
```{r}

#Function for doing survival analysis on module
survival_stats_function = function(module){
annotated_me |>
  dplyr::select(starts_with("ME"), last_event, survial_censor) |>
  tidyr::pivot_longer(cols = contains("ME"), names_to = "Module", values_to = "Value") |>
  dplyr::filter(Module == module) |>
  mutate(ME_division = ifelse(Value > median(Value), "high", "low")) |>
  survival::coxph((Surv(last_event, survial_censor) ~ ME_division), data = _) |> 
  summary()
}

#Run stats on all modules
survival_stats = lapply(colnames(annotated_me[1:17]), survival_stats_function)
names(survival_stats) = colnames(annotated_me[1:17])

#clean up
rm(survival_stats_function)

```

### Dataframe
```{r}

survival_stats_df = data.frame(matrix(ncol = 5, nrow = 0))

for(module in names(survival_stats)){
  
  pvalue = unname(survival_stats[[module]]$waldtest[3])
  HR = survival_stats[[module]]$conf.int[2]
  lower_interval = 1/survival_stats[[module]]$conf.int[3]
  upper_interval = 1/survival_stats[[module]]$conf.int[4]
  
  temp = c(module, pvalue, HR, lower_interval, upper_interval)
  
  survival_stats_df = rbind(temp, survival_stats_df)
  
}

colnames(survival_stats_df) <- c('module', 'pval', 'HR', "lower_interval", "upper_interval")

survival_stats_df = survival_stats_df |> 
  mutate_at(c('pval', 'HR', "lower_interval", "upper_interval"), as.numeric)

rm(list = c("module", "HR", "lower_interval", "pvalue", "temp", "upper_interval"))

```


##Forest Plot
```{r}

png(filename = "../outputs/plots/wgcna_forest_plot.png", height = 600, width = 900, res = 120)
ggplot(survival_stats_df, aes(x = HR, y = module, xmin = lower_interval, xmax = upper_interval)) +
  geom_point(size = 3) +
  geom_errorbarh(height=.1) +
  geom_vline(xintercept = 1, linetype = "dashed") +
  xlab("Unadjusted Hazard Ratio") + 
  ylab("")
dev.off()

```


## Plotting function
```{r}


#Survival
plot_survival = function(module_name){
  
  annotated_me |>
    dplyr::filter(tissue_rollup == "Cutaneous") |> 
    mutate(group = ifelse(.data[[module_name]] > median(.data[[module_name]]), "high", "low")) |> 
    survfit2(Surv(last_event, survial_censor) ~ group , data = _) |>
    ggsurvfit() +
      add_risktable(risktable_stats = "n.risk") +
      add_pvalue() +
      ggtitle(module_name)

}

```

## KM Plots
```{r}

plots = lapply(colnames(annotated_me[1:17]), plot_survival)
names(plots) = colnames(annotated_me[1:17])

plots

rm(plot_survival)

```


### Save
```{r}

#png(filename = "../outputs/plots/wgcna_survival_plots.png", height = 600, width = 1200, res = 120)
ggarrange(plots[["MEyellow"]], 
          plots[["MEtan"]], 
          plots[["MEgreenyellow"]],
          plots[["MEbrown"]])
#dev.off()

#clean up
rm(plots)

```


## Mutivariable Models
```{r}

survival_models = list()

#Module with only intercept
survival_models$intercept_only = survival::coxph(Surv(last_event, survial_censor) ~ 1, data = annotated_me)


#Model with all modules
survival_models$full_model = survival::coxph(Surv(last_event, survial_censor) ~ MEblue + MEturquoise + MEyellow + MEgreen + MEmagenta + MEbrown + MEsalmon + MElightcyan + MEblack + MEgreenyellow + MEred + MEmidnightblue + MEtan + MEcyan + MEpink + MEpurple + MEgrey, data = annotated_me)

#Step-wise variable selection
StepReg::stepwiseCox(Surv(last_event, survial_censor) ~  MEblue + MEturquoise + MEyellow + MEgreen + MEmagenta + MEbrown + MEsalmon + MElightcyan + MEblack + MEgreenyellow + MEred + MEmidnightblue + MEtan + MEcyan + MEpink + MEpurple + MEgrey, 
                     data = annotated_me, 
                     selection = "score",
                     select = "AIC")

#Best model
survival_models$optimized_model = survival::coxph(Surv(last_event, survial_censor) ~ MEyellow + MEgreen + MEmagenta + MEsalmon + MEblack + MEcyan, data = annotated_me)
summary(survival_models$optimized_model)

#AIC values
extractAIC(survival_models$intercept_only)
extractAIC(survival_models$full_model)
extractAIC(survival_models$optimized_model)

#BIC values
BIC(survival_models$intercept_only)
BIC(survival_models$full_model)
BIC(survival_models$optimized_model)

```


# Cell types signature enrichment

## Import signatures
```{r}

cell_signatures = as.list(read_excel("../references/Cell_type_Signatures.xlsx"))
cell_signatures = lapply(cell_signatures, function(x) x[!is.na(x)])

```


## Data frame of Enricher terms
```{r}

enricher_modules = module_genes |> 
  dplyr::select(Module, Symbol)
#rename columns to play nice with enricher
colnames(enricher_modules) = c("TermID", "geneID")


```


## Function
```{r}

module_enrichment = function(signature) {
  enricher(gene = cell_signatures[[signature]],
           TERM2GENE = enricher_modules,
           maxGSSize = 100000)
}

```


## Enricher analysis
```{r}

enricher_results = lapply(names(cell_signatures), module_enrichment)
#add names to results list
names(enricher_results) = names(cell_signatures)

#clean up
rm(module_enrichment)

```

### Tidy to dataframe
```{r}

enricher_results_df = data.frame()

for(cell_signature in names(enricher_results)){
  temp = enricher_results[[cell_signature]]@result
  temp[["Cell_Type"]] = cell_signature
  enricher_results_df = rbind(enricher_results_df, temp)
}

```


### Heatmap
```{r}

png(filename = "../outputs/plots/cell_types_in_WGCNA_modules.png", height = 600, width = 1000, res = 200)
ggplot(enricher_results_df, aes(x = Cell_Type, y = ID)) +
  geom_tile(aes(fill = `p.adjust`)) +
  scale_fill_gradient(low = "red", high = "white") +
  labs(x = "Cell Signature", y = "WGCNA Module", fill = "Adjusted\nP-Value", title = "Enrichment of Cell Signatures in\nWGCNA Modules") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
dev.off()

```

