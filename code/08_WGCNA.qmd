---
title: "WGCNA"
format: html
---

```{r}

library(WGCNA)
library(ggplot2)
library(dplyr)
library(doParallel)
library(rstatix)
library(clusterProfiler)
library(survival)
library(ggsurvfit)
library(tidygraph)
library(ggraph)
library(data.table)

ggplot2::theme_set(ggplot2::theme_classic())

enableWGCNAThreads()
allowWGCNAThreads()

```

# Load data
```{r}

#normalized expression data
normalized_data = as.data.frame(fread("../outputs/normalized_expression.csv"))
rownames(normalized_data) = normalized_data$V1
normalized_data = normalized_data[,2:ncol(normalized_data)]

#sample metadata
sample_metadata = readRDS("../data/sample_metadata.rds")

```

# Data Quality Check
```{r}

data_quality_check = goodSamplesGenes(normalized_data)
View(data_quality_check$allOK)

```

# Sample Outlier Check
```{r}

plot(hclust(dist(normalized_data)))

```


# Hard thresholding
```{r}

hard_threshold_signed = pickHardThreshold(normalized_data, 
                          dataIsExpr = TRUE)

ggplot(hard_threshold_signed$fitIndices, aes(x = Cut, y = `SFT.R.sq`)) +
  geom_point() +
  geom_hline(yintercept = 0.85, linetype = "dashed") 

ggplot(soft_threshold_signed$fitIndices, aes(x = Power, y = `mean.k.`, lab = )) +
  geom_point()

#hard_threshold = 0.65

```


# Soft thresholding
```{r}

#Signed network
soft_threshold_signed = pickSoftThreshold(normalized_data,
                                    networkType = "signed")

ggplot(soft_threshold_signed$fitIndices, aes(x = Power, y = `SFT.R.sq`, lab = )) +
  geom_point() +
  geom_hline(yintercept = 0.85, linetype = "dashed") +
  geom_vline(xintercept = 5, linetype = "dashed", size = 0.2)

ggplot(soft_threshold_signed$fitIndices, aes(x = Power, y = `mean.k.`, lab = )) +
  geom_point()

#soft threshold = 6

#Unsigned network
# soft_threshold_unsigned = pickSoftThreshold(normalized_data,
#                                     networkType = "unsigned")
# 
# ggplot(soft_threshold_unsigned$fitIndices, aes(x = Power, y = `SFT.R.sq`, lab = )) +
#   geom_point() +
#   geom_hline(yintercept = 0.85, linetype = "dashed") +
#   geom_vline(xintercept = 5, linetype = "dashed", size = 0.2)
# 
# ggplot(soft_threshold_unsigned$fitIndices, aes(x = Power, y = `mean.k.`, lab = )) +
#   geom_point()


```


# Module detection
```{r}

modules = blockwiseModules(normalized_data,
                 maxBlockSize = ncol(normalized_data),
                 networkType = "signed",
                 power = soft_threshold_signed$powerEstimate,
                 randomSeed = 123)

table(modules$colors)

plotDendroAndColors(modules$dendrograms[[1]], colors = modules$colors, dendroLabels = FALSE)

```


# Save WGCNA Object
```{r}

# saveRDS(modules, file = "../outputs/wgcna_object.rds")

```


# Load WGCNA Object
```{r}

modules = readRDS("../outputs/wgcna_object.rds")

```


# Data frame of genes in modules 
```{r}

#Create data frame with genes and corresponding module
module_genes = as.data.frame(modules$colors)
module_genes$ENSEMBL = row.names(module_genes)
names(module_genes)[1] = "Module"

#Add gene symbols
module_genes$Symbol = AnnotationDbi::mapIds(org.Hs.eg.db::org.Hs.eg.db,
                                            keys = module_genes$ENSEMBL,
                                            column = "SYMBOL",
                                            keytype = "ENSEMBL"
                                            )

#Add entrez ids
module_genes$ncbi = AnnotationDbi::mapIds(org.Hs.eg.db::org.Hs.eg.db,
                                            keys = module_genes$ENSEMBL,
                                            column = "ENTREZID",
                                            keytype = "ENSEMBL"
                                            )

```


# Data frame of module eigenvalues 
```{r}

annotated_me = merge(modules$MEs, sample_metadata, by.x = "row.names", by.y = "sample_id")
rownames(annotated_me) = annotated_me$Row.names
annotated_me = annotated_me[,c(-1)]

```

## Heatmap
```{r}

#Modules vs Samples
annotated_me |> 
  dplyr::select(starts_with("ME")) |> 
  as.matrix() |> 
  heatmap(scale = "column", labRow = annotated_me$tumor_descriptor)

#Heatmap of genes in MEblack module only
MEblack_genes = module_genes |> 
  dplyr::filter(Module == "black") 

MEblack_genes = normalized_data[,colnames(normalized_data) %in% MEblack_genes$ENSEMBL]
MEblack_genes = merge(dplyr::select(annotated_me, tumor_descriptor), MEblack_genes, by = "row.names")

heatmap(as.matrix(t(MEblack_genes[,3:ncol(MEblack_genes)])),
        labRow = rownames(t(MEblack_genes)),
        labCol = MEblack_genes$tumor_descriptor)

```

# Comparing modules between primary and metastatic samples
```{r}

#Primary vs Mets
module_stats = annotated_me |> 
  dplyr::select(starts_with("ME"), tumor_descriptor) |> 
  tidyr::pivot_longer(cols = contains("ME"), names_to = "Module", values_to = "Value") |> 
  group_by(Module) |> 
  t_test(Value ~ tumor_descriptor) |> 
  adjust_pvalue(method = "BH")

#Survival
survival_stats_function = function(module){
annotated_me |>
  dplyr::select(starts_with("ME"), last_event, survial_censor) |>
  tidyr::pivot_longer(cols = contains("ME"), names_to = "Module", values_to = "Value") |>
  dplyr::filter(Module == module) |>
  mutate(ME_division = ifelse(Value > median(Value), "high", "low")) |>
  survival::coxph((Surv(last_event, survial_censor) ~ ME_division), data = _) |> 
  summary()
}

survival_stats = lapply(module_names, survival_stats_function)
names(survival_stats) = module_names

#extract p-values
#NOT WORKING CURRENTLY
# for(i in 1:length(survival_stats)) {
#   temp = survival_stats[i]
#   print(temp[logtest])
#   # temp = temp$logtest[3]
#   # print(temp)
# }
# 
# 
# survival_stats$MEgrey$logtest[3]

```

## Plotting functions
```{r}

#Primary vs. Mets
plot_modules = function(module_name){
  
  annotated_me |>
    dplyr::filter(tissue_rollup == "Cutanous") |>
    ggplot(aes(x = tumor_descriptor, y = .data[[module_name]], color = tumor_descriptor)) +
      geom_jitter(width = 0.2) +
      stat_summary(fun = mean, geom = "crossbar", width = 0.3, color = "black") +
      stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.3, color = "black") +
      theme(legend.position = "none")
  
}

#Survival
plot_survival = function(module_name){
  
  annotated_me |>
    dplyr::filter(tissue_rollup == "Cutanous") |> 
    mutate(group = ifelse(.data[[module_name]] > median(.data[[module_name]]), "high", "low")) |> 
    survfit2(Surv(last_event, survial_censor) ~ group , data = _) |>
    ggsurvfit() +
      add_risktable(risktable_stats = "n.risk") +
      add_pvalue() +
      ggtitle(module_name)

}


```

## Plots
```{r}

module_names = colnames(annotated_me[1:17])

#Primary vs mets
lapply(module_names, plot_modules)

#Survival
lapply(module_names, plot_survival)


```


## Survival Models
```{r}

#Compare regression models with more/less modules
survival_models = list()

survival_models$full_model = survival::coxph(Surv(last_event, survial_censor) ~ MEblack + MEyellow + MEmagenta + MEpurple + MEgreenyellow + MEbrown
                , data = annotated_me)

survival_models$intercept_only = survival::coxph(Surv(last_event, survial_censor) ~ 1
                , data = annotated_me)

survival_models$one_variable = survival::coxph(Surv(last_event, survial_censor) ~ MEblack
                , data = annotated_me)

survival_models$two_variable = survival::coxph(Surv(last_event, survial_censor) ~ MEblack + MEyellow,
                                             data = annotated_me)

survival_models$two_variable2 = survival::coxph(Surv(last_event, survial_censor) ~ MEblack + MEmagenta,
                                             data = annotated_me)

survival_models$two_variable_interaction = survival::coxph(Surv(last_event, survial_censor) ~ (MEblack + MEyellow)^2,
                                             data = annotated_me)

survival_models$three_variable = survival::coxph(Surv(last_event, survial_censor) ~ MEblack + MEyellow + MEmagenta,
                                             data = annotated_me)

survival_models$three_variable_interaction = survival::coxph(Surv(last_event, survial_censor) ~ (MEblack + MEyellow + MEmagenta)^2,
                                             data = annotated_me)

extractAIC(survival_models$intercept_only)
extractAIC(survival_models$full_model)
extractAIC(survival_models$one_variable)
extractAIC(survival_models$two_variable)
extractAIC(survival_models$two_variable2)
extractAIC(survival_models$two_variable_interaction)
extractAIC(survival_models$three_variable)
extractAIC(survival_models$three_variable_interaction)

BIC(survival_models$intercept_only)
BIC(survival_models$full_model)
BIC(survival_models$one_variable)
BIC(survival_models$two_variable)
BIC(survival_models$two_variable2)
BIC(survival_models$two_variable_interaction)
BIC(survival_models$three_variable)
BIC(survival_models$three_variable_interaction)

#AICcmodavg::bictab()

```


# Network plots

## Genes
```{r}

in_module_genes = module_genes |> 
  dplyr::filter(Module == c("black")) |> 
  pull(ENSEMBL)

normalized_data_filtered = normalized_data |> 
  dplyr::select(in_module_genes)

rm(in_module_genes)

gene_correlations = WGCNA::cor(as.matrix(normalized_data_filtered))
gene_correlations[abs(gene_correlations) < 0.65] = 0
gene_correlations[abs(gene_correlations) > 0.65] = 1

gene_correlations_graph = as_tbl_graph(gene_correlations)

gene_correlations_graph = gene_correlations_graph |> 
  activate(nodes) |> 
  mutate(ENSEMBL = name) |> 
  left_join(module_genes, by = "ENSEMBL") |> 
  mutate(degree = centrality_degree(weights = weight))

gene_correlations_graph |> 
  filter(degree > 4) |> 
  ggraph::ggraph(layout = "fr") +
    geom_edge_link() +
    geom_node_point(aes(color = Module)) +
    scale_color_manual(values = c("darkgrey", "blue", "brown", "cyan", "green", "greenyellow", "lightcyan",
                                  "magenta", "midnightblue", "pink", "purple", "red", "salmon", "tan", "turquoise",
                                  "yellow"))



gene_correlations_graph |> 
  ggraph::ggraph() +
  geom_edge_link() + 
  geom_node_point()

```


##
```{r}



```


## Samples
```{r}



```

# Hub genes
```{r}

hub_genes = chooseTopHubInEachModule(normalized_data,
                         colorh = modules$colors) 

View(as.data.frame(hub_genes))

connectivity_df = intramodularConnectivity.fromExpr(normalized_data, 
                                  colors = modules$colors,
                                  networkType = "signed")

rownames(connectivity_df) = colnames(normalized_data)

```


# Module Membership (gene correlation with module eigen value)
```{r}



```


# Module pathway analysis
```{r}

enrich_results = module_genes |> 
  filter(Module == "black") |> 
  pull(ncbi) |> 
  na.omit() |> 
  enrichKEGG()

dotplot(enrich_results,
        showCategory = 20)

```

# Cell signature enrichment in modules

## Retreive cell signatures
```{r}

cell_signatures = as.list(readxl::read_excel("../references/Cell_type_Signatures.xlsx"))
cell_signatures = lapply(cell_signatures, function(x) x[!is.na(x)])

cell_signatures = readxl::read_excel("../references/Cell_type_Signatures.xlsx")


```


```{r}

enricher()

```


```{r}

# adjacency_matrix = adjacency(normalized_data_filtered)
# 
# TOM = TOMsimilarityFromExpr(normalized_data_filtered,
#                             power = 6,
#                             networkType = "signed",
#                             TOMType = "signed")
# rownames(TOM) = colnames(normalized_data)
# colnames(TOM) = colnames(normalized_data)
# 
# TOM_graph = as_tbl_graph(TOM)

```

