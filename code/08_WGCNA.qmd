---
title: "WGCNA"
format: html
---

```{r}

library(WGCNA)
library(ggplot2)
library(dplyr)
library(doParallel)
library(rstatix)
library(clusterProfiler)
library(survival)
library(ggsurvfit)
library(tidygraph)
library(ggraph)
library(data.table)
library(parallel)

ggplot2::theme_set(ggplot2::theme_classic())

enableWGCNAThreads()
allowWGCNAThreads()

```

# Load data
```{r}

#normalized expression data
source("functions/Load_Normalized_Expression.R")
normalized_data = load_normalized_expression("../outputs/normalized_expression.csv")
rm(load_normalized_expression)

#sample metadata
source("functions/Load_Sample_Metadata.R")
sample_metadata = load_sample_metadata("../data/sample_metadata.csv")
rm(load_sample_metadata)

#Previously computed WGCNA modules
modules = readRDS("../outputs/wgcna_object.rds")

```

# Data Quality Check
```{r}

data_quality_check = goodSamplesGenes(normalized_data)
View(data_quality_check$allOK)

```

# Sample Outlier Check
```{r}

plot(hclust(dist(normalized_data)))

```


# Hard thresholding
```{r}

hard_threshold_signed = pickHardThreshold(normalized_data, 
                          dataIsExpr = TRUE)

ggplot(hard_threshold_signed$fitIndices, aes(x = Cut, y = `SFT.R.sq`)) +
  geom_point() +
  geom_hline(yintercept = 0.85, linetype = "dashed") 

ggplot(soft_threshold_signed$fitIndices, aes(x = Power, y = `mean.k.`, lab = )) +
  geom_point()

#hard_threshold = 0.65

```


# Soft thresholding
```{r}

#Signed network
soft_threshold_signed = pickSoftThreshold(normalized_data,
                                    networkType = "signed")

ggplot(soft_threshold_signed$fitIndices, aes(x = Power, y = `SFT.R.sq`, lab = )) +
  geom_point() +
  geom_hline(yintercept = 0.85, linetype = "dashed") +
  geom_vline(xintercept = 5, linetype = "dashed", size = 0.2)

ggplot(soft_threshold_signed$fitIndices, aes(x = Power, y = `mean.k.`, lab = )) +
  geom_point()

#soft threshold = 6

#Unsigned network
# soft_threshold_unsigned = pickSoftThreshold(normalized_data,
#                                     networkType = "unsigned")
# 
# ggplot(soft_threshold_unsigned$fitIndices, aes(x = Power, y = `SFT.R.sq`, lab = )) +
#   geom_point() +
#   geom_hline(yintercept = 0.85, linetype = "dashed") +
#   geom_vline(xintercept = 5, linetype = "dashed", size = 0.2)
# 
# ggplot(soft_threshold_unsigned$fitIndices, aes(x = Power, y = `mean.k.`, lab = )) +
#   geom_point()


```


# Module detection
```{r}

modules = blockwiseModules(normalized_data,
                 maxBlockSize = ncol(normalized_data),
                 networkType = "signed",
                 power = soft_threshold_signed$powerEstimate,
                 randomSeed = 123)

table(modules$colors)

plotDendroAndColors(modules$dendrograms[[1]], colors = modules$colors, dendroLabels = FALSE)

```


# Save WGCNA Object
```{r}

# saveRDS(modules, file = "../outputs/wgcna_object.rds")

```


# Data frame of genes in modules 
```{r}

#Create data frame with genes and corresponding module
module_genes = as.data.frame(modules$colors)
module_genes$ENSEMBL = row.names(module_genes)
names(module_genes)[1] = "Module"

#Add gene symbols
module_genes$Symbol = AnnotationDbi::mapIds(org.Hs.eg.db::org.Hs.eg.db,
                                            keys = module_genes$ENSEMBL,
                                            column = "SYMBOL",
                                            keytype = "ENSEMBL"
                                            )

#Add entrez ids
module_genes$ncbi = AnnotationDbi::mapIds(org.Hs.eg.db::org.Hs.eg.db,
                                            keys = module_genes$ENSEMBL,
                                            column = "ENTREZID",
                                            keytype = "ENSEMBL"
                                            )

```


# Data frame of module eigenvalues 
```{r}

annotated_me = merge(modules$MEs, sample_metadata, by.x = "row.names", by.y = "sample_id")
rownames(annotated_me) = annotated_me$Row.names
annotated_me = annotated_me[,c(-1)]

```

## Heatmaps

### Modules vs Samples
```{r}

#Modules vs Samples
annotated_me |> 
  dplyr::select(starts_with("ME")) |> 
  as.matrix() |> 
  heatmap(scale = "column", labRow = annotated_me$tumor_descriptor)

#Heatmap of genes in MEblack module only
MEblack_genes = module_genes |> 
  dplyr::filter(Module == "black") 

MEblack_genes = normalized_data[,colnames(normalized_data) %in% MEblack_genes$ENSEMBL]
MEblack_genes = merge(dplyr::select(annotated_me, tumor_descriptor), MEblack_genes, by = "row.names")

heatmap(as.matrix(t(MEblack_genes[,3:ncol(MEblack_genes)])),
        labRow = rownames(t(MEblack_genes)),
        labCol = MEblack_genes$tumor_descriptor)

#Function

module_gene_heatmap = function(module){
  
  temp = module_genes |> 
  dplyr::filter(Module == module) 

  temp = normalized_data[,colnames(normalized_data) %in% temp$ENSEMBL]
  temp = merge(dplyr::select(annotated_me, tumor_descriptor), temp, by = "row.names")

  heatmap(as.matrix(t(temp[,3:ncol(temp)])),
        labRow = rownames(t(temp)),
        labCol = temp$tumor_descriptor)
}

module_gene_heatmap("black")

```

### Genes in Modules

#### Function
```{r}

module_gene_heatmap = function(module){
  
  temp = module_genes |> 
  dplyr::filter(Module == module) 

  temp = normalized_data[,colnames(normalized_data) %in% temp$ENSEMBL]
  temp = merge(dplyr::select(annotated_me, tumor_descriptor), temp, by = "row.names")

  heatmap(as.matrix(t(temp[,3:ncol(temp)])),
        labRow = rownames(t(temp)),
        labCol = temp$tumor_descriptor,
        main = module)
}

```


#### Plots
```{r}

lapply(unique(module_genes$Module), module_gene_heatmap)

```
# Hub genes
```{r}
#Get hub genes
hub_genes = chooseTopHubInEachModule(normalized_data,
                         colorh = modules$colors) 

#Get connectivity
connectivity_df = intramodularConnectivity.fromExpr(normalized_data, 
                                  colors = modules$colors,
                                  networkType = "signed")
#add row names
rownames(connectivity_df) = colnames(normalized_data)
#merge with module gene info
module_genes = merge(module_genes, connectivity_df, by = "row.names")
rownames(module_genes) = module_genes$Row.names
module_genes = module_genes[,-1]
#clean up
rm(connectivity_df)

```

## Plots
```{r}
 
#Plotting function
module_gene_correlation_plot = function(module, gene) {
  normalized_data |> 
  merge(annotated_me, by = "row.names") |> 
  ggplot(aes(x = .data[[module]], y = .data[[gene]])) +
    geom_point() +
    geom_smooth(method = "lm")
}

#Test
module_gene_correlation_plot("ENSG00000178363", "MEblack")

```

# Module pathway analysis
```{r}

#Function for assessing enrichment in module
module_enrichment = function(module) {
  module_genes |> 
  filter(Module == module) |> 
  pull(ncbi) |> 
  na.omit() |> 
  enrichGO(OrgDb = org.Hs.eg.db::org.Hs.eg.db,
           ont = "ALL") |> 
  dotplot() + ggtitle(module)
}

#Assess all modules
parallel::mclapply(unique(module_genes$Module), 
                   module_enrichment, 
                   mc.cores = 54)

```

# Network plots

```{r}

in_module_genes = module_genes |> 
  dplyr::filter(Module == c("black")) |> 
  pull(ENSEMBL)

normalized_data_filtered = normalized_data |> 
  dplyr::select(in_module_genes)

rm(in_module_genes)

gene_correlations = WGCNA::cor(as.matrix(normalized_data_filtered))
gene_correlations[abs(gene_correlations) < 0.65] = 0
gene_correlations[abs(gene_correlations) > 0.65] = 1

gene_correlations_graph = as_tbl_graph(gene_correlations)

gene_correlations_graph = gene_correlations_graph |> 
  activate(nodes) |> 
  mutate(ENSEMBL = name) |> 
  left_join(module_genes, by = "ENSEMBL") |> 
  mutate(degree = centrality_degree(weights = weight))

gene_correlations_graph |> 
  #filter(degree > 4) |> 
  ggraph::ggraph(layout = "fr") +
    geom_edge_link() +
    geom_node_point(aes(color = Module)) 

```
## Plotting function
```{r}

network_plot = function(module) { 
  
  in_module_genes = module_genes |> 
    dplyr::filter(Module == module) |> 
    pull(ENSEMBL)

  normalized_data_filtered = normalized_data |> 
    dplyr::select(in_module_genes)

  rm(in_module_genes)

  gene_correlations = WGCNA::cor(as.matrix(normalized_data_filtered))
  gene_correlations[abs(gene_correlations) < 0.65] = 0
  gene_correlations[abs(gene_correlations) > 0.65] = 1
  gene_correlations_graph = as_tbl_graph(gene_correlations)

  gene_correlations_graph = gene_correlations_graph |> 
    activate(nodes) |> 
    mutate(ENSEMBL = name) |> 
    left_join(module_genes, by = "ENSEMBL") |> 
    mutate(degree = centrality_degree(weights = weight))

  gene_correlations_graph |> 
    ggraph::ggraph(layout = "fr") +
      geom_edge_link() +
      geom_node_point(aes(color = Module)) 

}

network_plot("yellow")

```


# Comparing modules between primary and metastatic samples

## Statistics
```{r}

#Primary vs Mets
module_stats = annotated_me |> 
  dplyr::select(starts_with("ME"), tumor_descriptor) |> 
  tidyr::pivot_longer(cols = contains("ME"), names_to = "Module", values_to = "Value") |> 
  group_by(Module) |> 
  t_test(Value ~ tumor_descriptor) |> 
  adjust_pvalue(method = "BH")


```

## Plotting function
```{r}

#Primary vs. Mets
plot_modules = function(module_name){
  
  annotated_me |>
    dplyr::filter(tissue_rollup == "Cutanous") |>
    ggplot(aes(x = tumor_descriptor, y = .data[[module_name]], color = tumor_descriptor)) +
      geom_jitter(width = 0.2) +
      stat_summary(fun = mean, geom = "crossbar", width = 0.3, color = "black") +
      stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.3, color = "black") +
      theme(legend.position = "none")
  
}

```

## Plots
```{r}

#Primary vs mets
lapply(module_names, plot_modules)

```
#Survival Analysis

## Statistics
```{r}

#Survival
survival_stats_function = function(module){
annotated_me |>
  dplyr::select(starts_with("ME"), last_event, survial_censor) |>
  tidyr::pivot_longer(cols = contains("ME"), names_to = "Module", values_to = "Value") |>
  dplyr::filter(Module == module) |>
  mutate(ME_division = ifelse(Value > median(Value), "high", "low")) |>
  survival::coxph((Surv(last_event, survial_censor) ~ ME_division), data = _) |> 
  summary()
}

module_names = colnames(annotated_me[1:17])
survival_stats = lapply(module_names, survival_stats_function)
names(survival_stats) = module_names

#extract p-values
#NOT WORKING CURRENTLY
# for(i in 1:length(survival_stats)) {
#   temp = survival_stats[i]
#   print(temp[logtest])
#   # temp = temp$logtest[3]
#   # print(temp)
# }
# 
# 
# survival_stats$MEgrey$logtest[3]

```

## Plotting function
```{r}


#Survival
plot_survival = function(module_name){
  
  annotated_me |>
    dplyr::filter(tissue_rollup == "Cutanous") |> 
    mutate(group = ifelse(.data[[module_name]] > median(.data[[module_name]]), "high", "low")) |> 
    survfit2(Surv(last_event, survial_censor) ~ group , data = _) |>
    ggsurvfit() +
      add_risktable(risktable_stats = "n.risk") +
      add_pvalue() +
      ggtitle(module_name)

}

```

## Plots
```{r}

#Survival
#lapply(module_names, plot_survival)
parallel::mclapply(module_names, 
                   plot_survival, 
                   mc.cores = 54)

```


## Save image
```{r}

png(file = "../outputs/yellow_module_survival.png")
plot_survival("MEyellow")
dev.off()

```



## Mutivariable Models
```{r}

survival_models = list()

#Module with only intercept
survival_models$intercept_only = survival::coxph(Surv(last_event, survial_censor) ~ 1, data = annotated_me)


#Model with all modules
survival_models$full_model = survival::coxph(Surv(last_event, survial_censor) ~ MEblue + MEturquoise + MEyellow + MEgreen + MEmagenta + MEbrown + MEsalmon + MElightcyan + MEblack + MEgreenyellow + MEred + MEmidnightblue + MEtan + MEcyan + MEpink + MEpurple + MEgrey, data = annotated_me)

#Step-wise variable selection
StepReg::stepwiseCox(Surv(last_event, survial_censor) ~  MEblue + MEturquoise + MEyellow + MEgreen + MEmagenta + MEbrown + MEsalmon + MElightcyan + MEblack + MEgreenyellow + MEred + MEmidnightblue + MEtan + MEcyan + MEpink + MEpurple + MEgrey, 
                     data = annotated_me, 
                     selection = "score",
                     select = "AIC")

#Best model
survival_models$optimized_model = survival::coxph(Surv(last_event, survial_censor) ~ MEyellow + MEgreen + MEmagenta + MEsalmon + MEblack + MEcyan, data = annotated_me)
summary(survival_models$optimized_model)


#AIC values
extractAIC(survival_models$intercept_only)
extractAIC(survival_models$full_model)
extractAIC(survival_models$optimized_model)

#BIC values
BIC(survival_models$intercept_only)
BIC(survival_models$full_model)
BIC(survival_models$optimized_model)

```
# Cell signature enrichment in modules

## Retreive cell signatures
```{r}

cell_signatures = as.list(readxl::read_excel("../references/Cell_type_Signatures.xlsx"))
cell_signatures = lapply(cell_signatures, function(x) x[!is.na(x)])

```


## Data frame of module genes
```{r}

#Make a data frame of custom enricher terms for modules
enricher_modules = module_genes |> 
  dplyr::select(Module, Symbol)
#rename columns to play nice with enricher
colnames(enricher_modules) = c("TermID", "geneID")


```


## Function
```{r}

#Function
module_enrichment = function(signature) {
  enricher(gene = cell_signatures[[signature]],
           TERM2GENE = enricher_modules,
           maxGSSize = 100000)
}


```


## Cell Signature Enrichments
```{r}

enricher_results = lapply(names(cell_signatures), module_enrichment)
#add names to results list
names(enricher_results) = names(cell_signatures)

```


## Plots
```{r}

enricher_results_df = data.frame()

for(cell_signature in names(enricher_results)){
  temp = enricher_results[[cell_signature]]@result
  temp[["Cell_Type"]] = cell_signature
  enricher_results_df = rbind(enricher_results_df, temp)
}


enricher_results_df_pval = enricher_results_df |> 
  tidyr::pivot_wider(names_from = Cell_Type, values_from = p.adjust, id_cols = ID)

rownames(enricher_results_df_pval) = enricher_results_df_pval$ID

enricher_results_df_pval[,2:14] = 1 - enricher_results_df_pval[,2:14]
#need to invert p-values

enricher_results_df_pval[is.na(enricher_results_df_pval)] = 0


png(filename = "../outputs/cell_types_in_WGCNA_modules.png")
heatmap(as.matrix(enricher_results_df_pval[,2:14]),
        labRow = enricher_results_df_pval$ID,
        scale = "none",
        Rowv = NA,
        Colv = NA,
        main = "Cell Signature Enrichment in WGCNA Modules")
dev.off()

#need a legend


```

